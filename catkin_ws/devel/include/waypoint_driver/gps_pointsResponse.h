// Generated by gencpp from file waypoint_driver/gps_pointsResponse.msg
// DO NOT EDIT!


#ifndef WAYPOINT_DRIVER_MESSAGE_GPS_POINTSRESPONSE_H
#define WAYPOINT_DRIVER_MESSAGE_GPS_POINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace waypoint_driver
{
template <class ContainerAllocator>
struct gps_pointsResponse_
{
  typedef gps_pointsResponse_<ContainerAllocator> Type;

  gps_pointsResponse_()
    : reached_status(false)  {
    }
  gps_pointsResponse_(const ContainerAllocator& _alloc)
    : reached_status(false)  {
  (void)_alloc;
    }



   typedef uint8_t _reached_status_type;
  _reached_status_type reached_status;





  typedef boost::shared_ptr< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct gps_pointsResponse_

typedef ::waypoint_driver::gps_pointsResponse_<std::allocator<void> > gps_pointsResponse;

typedef boost::shared_ptr< ::waypoint_driver::gps_pointsResponse > gps_pointsResponsePtr;
typedef boost::shared_ptr< ::waypoint_driver::gps_pointsResponse const> gps_pointsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator1> & lhs, const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.reached_status == rhs.reached_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator1> & lhs, const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace waypoint_driver

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a7f193d6d3387641f8cb3e2fb24e17d";
  }

  static const char* value(const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a7f193d6d338764ULL;
  static const uint64_t static_value2 = 0x1f8cb3e2fb24e17dULL;
};

template<class ContainerAllocator>
struct DataType< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "waypoint_driver/gps_pointsResponse";
  }

  static const char* value(const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool reached_status\n"
;
  }

  static const char* value(const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reached_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_pointsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::waypoint_driver::gps_pointsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::waypoint_driver::gps_pointsResponse_<ContainerAllocator>& v)
  {
    s << indent << "reached_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reached_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WAYPOINT_DRIVER_MESSAGE_GPS_POINTSRESPONSE_H
