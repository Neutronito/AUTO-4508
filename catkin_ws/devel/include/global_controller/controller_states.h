// Generated by gencpp from file global_controller/controller_states.msg
// DO NOT EDIT!


#ifndef GLOBAL_CONTROLLER_MESSAGE_CONTROLLER_STATES_H
#define GLOBAL_CONTROLLER_MESSAGE_CONTROLLER_STATES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace global_controller
{
template <class ContainerAllocator>
struct controller_states_
{
  typedef controller_states_<ContainerAllocator> Type;

  controller_states_()
    : is_driving_automatically(false)
    , is_allowed_to_drive(false)
    , tiz_is_boosted(false)  {
    }
  controller_states_(const ContainerAllocator& _alloc)
    : is_driving_automatically(false)
    , is_allowed_to_drive(false)
    , tiz_is_boosted(false)  {
  (void)_alloc;
    }



   typedef uint8_t _is_driving_automatically_type;
  _is_driving_automatically_type is_driving_automatically;

   typedef uint8_t _is_allowed_to_drive_type;
  _is_allowed_to_drive_type is_allowed_to_drive;

   typedef uint8_t _tiz_is_boosted_type;
  _tiz_is_boosted_type tiz_is_boosted;





  typedef boost::shared_ptr< ::global_controller::controller_states_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::global_controller::controller_states_<ContainerAllocator> const> ConstPtr;

}; // struct controller_states_

typedef ::global_controller::controller_states_<std::allocator<void> > controller_states;

typedef boost::shared_ptr< ::global_controller::controller_states > controller_statesPtr;
typedef boost::shared_ptr< ::global_controller::controller_states const> controller_statesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::global_controller::controller_states_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::global_controller::controller_states_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::global_controller::controller_states_<ContainerAllocator1> & lhs, const ::global_controller::controller_states_<ContainerAllocator2> & rhs)
{
  return lhs.is_driving_automatically == rhs.is_driving_automatically &&
    lhs.is_allowed_to_drive == rhs.is_allowed_to_drive &&
    lhs.tiz_is_boosted == rhs.tiz_is_boosted;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::global_controller::controller_states_<ContainerAllocator1> & lhs, const ::global_controller::controller_states_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace global_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::global_controller::controller_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::global_controller::controller_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_controller::controller_states_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_controller::controller_states_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_controller::controller_states_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_controller::controller_states_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::global_controller::controller_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "656034952bcd2a7d6b51db3480a3adeb";
  }

  static const char* value(const ::global_controller::controller_states_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x656034952bcd2a7dULL;
  static const uint64_t static_value2 = 0x6b51db3480a3adebULL;
};

template<class ContainerAllocator>
struct DataType< ::global_controller::controller_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "global_controller/controller_states";
  }

  static const char* value(const ::global_controller::controller_states_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::global_controller::controller_states_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool is_driving_automatically\n"
"bool is_allowed_to_drive\n"
"bool tiz_is_boosted\n"
;
  }

  static const char* value(const ::global_controller::controller_states_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::global_controller::controller_states_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_driving_automatically);
      stream.next(m.is_allowed_to_drive);
      stream.next(m.tiz_is_boosted);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct controller_states_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::global_controller::controller_states_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::global_controller::controller_states_<ContainerAllocator>& v)
  {
    s << indent << "is_driving_automatically: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_driving_automatically);
    s << indent << "is_allowed_to_drive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_allowed_to_drive);
    s << indent << "tiz_is_boosted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tiz_is_boosted);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLOBAL_CONTROLLER_MESSAGE_CONTROLLER_STATES_H
